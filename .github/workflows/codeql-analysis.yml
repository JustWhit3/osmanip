name: "CodeQL"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '45 22 * * 0'

jobs:
  analyze:
    name: Analyze
    runs-on: ${{ matrix.os }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        language: [ 'cpp' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
    
    - name: Installing extra dependencies and compiling (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
       sudo apt install build-essential g++ libboost-all-dev wget unzip doctest-dev

       exprtk_sha1=ca5c577917646ddba3f71ce6d5dd7d01f351ee80
       wget https://github.com/ArashPartow/exprtk/archive/$exprtk_sha1.zip
       mv $exprtk_sha1.zip exprtk-$exprtk_sha1.zip
       unzip exprtk-$exprtk_sha1.zip
       sudo cp exprtk-$exprtk_sha1/exprtk.hpp /usr/include/
       rm -rf exprtk-*

       wget https://github.com/JustWhit3/arsenalgear-cpp/archive/main.zip
       mv main.zip arsenalgear-cpp-main.zip
       unzip arsenalgear-cpp-main.zip
       cd arsenalgear-cpp-main || exit
       make
       sudo mkdir -p /usr/include/arsenalgear
       sudo cp -r include/* /usr/include/arsenalgear
       sudo cp lib/* /usr/lib
       cd ..
       rm -rf arsenalgear-*

       make
    - name: Installing extra dependencies and compiling (MacOS)
      if: matrix.os == 'macos-latest'
      run: |
       brew install boost doctest
       
       exprtk_sha1=ca5c577917646ddba3f71ce6d5dd7d01f351ee80
       wget https://github.com/ArashPartow/exprtk/archive/$exprtk_sha1.zip
       mv $exprtk_sha1.zip exprtk-$exprtk_sha1.zip
       unzip exprtk-$exprtk_sha1.zip
       INCLUDE=$(pcre-config --cflags)
       LIB=$(pcre-config --libs)
       sudo cp exprtk-$exprtk_sha1/exprtk.hpp ${INCLUDE:2}

       wget https://github.com/JustWhit3/arsenalgear-cpp/archive/main.zip
       mv main.zip arsenalgear-cpp-main.zip
       unzip arsenalgear-cpp-main.zip
       cd arsenalgear-cpp-main || exit
       make
       sudo mkdir -p ${INCLUDE:2}/arsenalgear
       sudo cp include/* ${INCLUDE:2}/arsenalgear
       LIF_FIN=${LIB:2}
       sudo cp lib/* ${LIF_FIN::-7}
       cd ..
       rm -rf arsenalgear-*

       make
    - name: Installing extra dependencies and compiling (Windows)
      if: matrix.os == 'windows-latest'
      run: |
       choco install unzip wget

       mkdir C:\install
       cd C:\install
       wget https://boostorg.jfrog.io/artifactory/main/release/1.79.0/source/boost_1_79_0.zip | Out-Null
       unzip boost_1_79_0.zip | Out-Null
       rm boost_1_79_0.zip
       mkdir C:\boost-build
       mkdir C:\install\boost_1_79_0\boost-build
       mkdir C:\boost
       cd -
       cd C:\install\boost_1_79_0\tools\build
       .\bootstrap.bat gcc
       .\b2 --prefix="C:\boost-build" install
       $Env:PATH += ";C:\boost-build\bin"
       cd -
       cd C:\install\boost_1_79_0
       b2 --build-dir="C:\install\boost_1_79_0\build" --build-type=complete --prefix="C:\boost" toolset=gcc install
       cd -

       wget https://github.com/doctest/doctest/archive/refs/heads/master.zip | Out-Null
       unzip master.zip | Out-Null
       rm master.zip
       mkdir C:\include\doctest
       cp doctest-master\doctest\doctest.h C:\include\doctest
       rd -r doctest-master

       wget https://github.com/JustWhit3/arsenalgear-cpp/archive/main.zip
       mv main.zip arsenalgear-cpp-main.zip
       unzip arsenalgear-cpp-main.zip
       cd arsenalgear-cpp-main || exit
       make
       sudo mkdir -p C:\include\arsenalgear
       sudo mkdir -p C:\lib
       sudo cp -r include/* C:\include\arsenalgear
       sudo cp lib/* C:\lib
       cd ..
       rm -rf arsenalgear-*

       make
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2